extends MarginContainer
class_name StatsUI

onready var _hp_label: Label = $VBoxContainer/HP

<<<<<<< Updated upstream
func _ready():
	events.connect('player_health_changed', self, '_on_PlayerEntity_health_changed')
||||||| merged common ancestors
onready var _health_progress_bar = $VBoxContainer/HealthProgressBar
onready var _status_effect_bar_list = $VBoxContainer/StatusEffectBars

var _entity : ActorEntity

func init(entity: ActorEntity):
	_entity = entity
	_entity.connect('health_changed', self, '_on_health_changed')
	_entity.connect('status_effects_processed', self, '_on_status_effects_processed')
	update_hp(_entity.health, _entity.max_health)
	print_debug("init", entity)
=======
onready var _health_progress_bar = $VBoxContainer/HealthProgressBar
onready var _status_effect_bar_list = $VBoxContainer/StatusEffectBars

var _entity : ActorEntity

func init(entity: ActorEntity):
	_entity = entity
	_entity.connect('health_changed', self, '_on_health_changed')
	_entity.connect('status_effects_processed', self, '_on_status_effects_processed')
	update_hp(_entity.health, _entity.max_health)
>>>>>>> Stashed changes

func update_hp(current_hp: int, max_hp: int) -> void:
	_hp_label.set_text("HP: " + str(current_hp) + " / " + str(max_hp))

func _on_PlayerEntity_health_changed(health: int, old_health: int):
	update_hp(globals.player_entity.health, globals.player_entity.max_health)
